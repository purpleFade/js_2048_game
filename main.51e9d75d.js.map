{"version":3,"sources":["scripts/main.js"],"names":["startMessage","document","querySelector","winnerMessage","loseMessage","gameScore","buttonStart","fieldRows","Array","from","querySelectorAll","size","score","field","clearField","length","fill","createRandomNumb","emptyCells","row","cell","push","randomCell","Math","floor","random","value","changedGameField","forEach","rowIndex","currentCell","cellIndex","renderCell","children","innerText","className","gameOver","some","includes","mergeCells","removeEventListener","pushedArrows","classList","remove","transposition","arr","map","_","i","joinCells","withoutZeroCells","filter","splice","arrowLeft","arrowRight","reversedRow","joinedRow","reverse","arrowUp","arrowDown","fillAllCels","element","originalField","JSON","stringify","key","addEventListener","add","replace","hidden"],"mappings":"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","file":"main.51e9d75d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startMessage = document.querySelector('.message-start');\nconst winnerMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.button');\nconst fieldRows = Array.from(document.querySelectorAll('.field-row'));\n\nconst size = 4;\nlet score = 0;\nlet field = clearField();\n\nfunction clearField() {\n  return Array.from({ length: size },\n    () => Array(size).fill(0));\n}\n\nfunction createRandomNumb() {\n  const emptyCells = [];\n\n  for (let row = 0; row < size; row++) {\n    for (let cell = 0; cell < size; cell++) {\n      if (field[row][cell] === 0) {\n        emptyCells.push({\n          row, cell,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomCell\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    const value = Math.random() > 0.1 ? 2 : 4;\n\n    field[randomCell.row][randomCell.cell] = value;\n  }\n}\n\nfunction changedGameField() {\n  field.forEach((row, rowIndex) => {\n    row.forEach((currentCell, cellIndex) => {\n      const renderCell = fieldRows[rowIndex].children[cellIndex];\n\n      renderCell.innerText = currentCell || '';\n\n      renderCell.className = `field-cell${currentCell\n        ? ` field-cell--${currentCell}`\n        : ''}`;\n    });\n  });\n\n  gameScore.innerText = score;\n  gameOver();\n}\n\nfunction gameOver() {\n  const hasEmptyCells = field.some(row => row.includes(0));\n\n  if (!hasEmptyCells && !mergeCells()) {\n    document.removeEventListener('keydown', pushedArrows);\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction mergeCells() {\n  for (let row = 0; row < size; row++) {\n    for (let cell = 0; cell < size - 1; cell++) {\n      if (field[row][cell] === field[row][cell + 1]\n        || field[cell][row] === field[cell + 1][row]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction transposition(arr) {\n  return arr[0].map((_, i) => arr.map(row => row[i]));\n}\n\nfunction joinCells(row) {\n  const withoutZeroCells = row.filter(value => value !== 0);\n\n  for (let i = 0; i < withoutZeroCells.length - 1; i++) {\n    if (withoutZeroCells[i] === withoutZeroCells[i + 1]) {\n      withoutZeroCells[i] *= 2;\n      score += withoutZeroCells[i];\n      withoutZeroCells.splice(i + 1, 1);\n    }\n  }\n\n  return [\n    ...withoutZeroCells,\n    ...Array(size - withoutZeroCells.length).fill(0),\n  ];\n}\n\nfunction arrowLeft() {\n  field.forEach((row, rowIndex) => {\n    field[rowIndex] = joinCells(row);\n  });\n}\n\nfunction arrowRight() {\n  field.forEach((row, rowIndex) => {\n    const reversedRow = [...row].reverse();\n    const joinedRow = joinCells(reversedRow);\n\n    field[rowIndex] = joinedRow.reverse();\n  });\n}\n\nfunction arrowUp() {\n  field = transposition(field);\n  arrowLeft();\n  field = transposition(field);\n}\n\nfunction arrowDown() {\n  field = transposition(field);\n  arrowRight();\n  field = transposition(field);\n}\n\nfunction fillAllCels() {\n  createRandomNumb();\n  changedGameField();\n}\n\nfunction pushedArrows(element) {\n  const originalField = JSON.stringify(field);\n\n  switch (element.key) {\n    case 'ArrowLeft':\n      arrowLeft();\n      break;\n\n    case 'ArrowRight':\n      arrowRight();\n      break;\n\n    case 'ArrowUp':\n      arrowUp();\n      break;\n\n    case 'ArrowDown':\n      arrowDown();\n      break;\n\n    default:\n      return;\n  }\n\n  if (JSON.stringify(field) !== originalField) {\n    fillAllCels();\n  }\n}\n\nbuttonStart.addEventListener('click', () => {\n  document.addEventListener('keydown', pushedArrows);\n  winnerMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  if (buttonStart.innerText === 'Start') {\n    buttonStart.innerText = 'Restart';\n    buttonStart.classList.replace('start', 'restart');\n    startMessage.hidden = true;\n  } else {\n    field = clearField();\n    score = 0;\n  }\n\n  createRandomNumb();\n  fillAllCels();\n});\n"]}